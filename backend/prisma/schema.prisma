// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  slug        String        @unique
  description String
  price       Float
  stock       Int           @default(1)
  weight      Float         @default(0)
  height      Float         @default(0)
  lenght      Float         @default(0)
  width       Float         @default(0)
  images      String[]
  status      ProductStatus @default(AVAILABLE)
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum ProductStatus {
  AVAILABLE
  SOLD
  HIDDEN
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Orders        Order[]

  role       String?
  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Order {
  id                    Int             @id @default(autoincrement())
  userId                String
  user                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSessionId       String          @unique
  email                 String
  phone                 String?
  total                 Float
  subtotal              Float?
  shippingOption        String?
  shippingCost          Float?
  taxes                 Float?
  deliveryMethod        String?
  relayId               String?
  relayName             String?
  relayAddress          String?
  trackingNumber        String?
  trackingUrl           String?
  labelUrl              String?
  billingAddress        String?
  detailsBillingAddress String?
  postalCode            String?
  city                  String?
  country               String?
  createdAt             DateTime        @default(now())
  status                OrderStatusType @default(pending)
  items                 OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  quantity  Int
  imageUrl  String?
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

enum OrderStatusType {
  pending
  paid
  shipped
  delivered
  cancelled
}

model Legal {
  id        Int      @id @default(1)
  mentions  String   @db.Text
  cgv       String   @db.Text
  privacy   String   @db.Text
  updatedAt DateTime @updatedAt
}
